### üêï REST CLIENT - CON AUTENTICACI√ìN (AUTH### ===========================================
### 2. LOGIN - OBTENER TOKENS (OBLIGATORIO)
### ===========================================
### ‚ö†Ô∏è OBLIGATORIO: Ejecuta este paso PRIMERO para obtener los tokens

### Login con usuario ADMIN
POST http://localhost:4000/api/login
Content-Type: application/json

{
  "email": "admin@parcialoh.com",
  "password": "admin123"
}

### Login con usuario MANAGER
POST http://localhost:4000/api/login
Content-Type: application/json

{
  "email": "manager@parcialoh.com",
  "password": "manager123"
}

### Login con usuario regular
POST http://localhost:4000/api/login
Content-Type: application/json

{
  "email": "user@parcialoh.com",
  "password": "user123"
}ue)
### Este archivo contiene ejemplos para usar cuando AUTH_ENABLED=true
### üîê IMPORTANTE: Todos los endpoints requieren autenticaci√≥n
### Necesitas hacer login primero para obtener los tokens

### ===========================================
### 1. REGISTRO DE USUARIO (SIN AUTENTICACI√ìN)
### ===========================================
### Este endpoint NO requiere autenticaci√≥n
### Puedes especificar el rol: ADMIN, USER, MODERATOR, VIEWER
### Si no especificas rol, se asigna USER por defecto

### Registro con rol USER (por defecto)
POST http://localhost:4000/api/register
Content-Type: application/json

{
  "name": "Juan P√©rez",
  "email": "juan.user@example.com",
  "password": "password123"
}

### Registro con rol ADMIN
POST http://localhost:4000/api/register
Content-Type: application/json

{
  "name": "Admin User",
  "email": "admin.test@example.com",
  "password": "password123",
  "role": "ADMIN"
}

### Registro con rol MODERATOR
POST http://localhost:4000/api/register
Content-Type: application/json

{
  "name": "Moderator User",
  "email": "mod.test@example.com",
  "password": "password123",
  "role": "MODERATOR"
}

### ===========================================
### 2. LOGIN - OBTENER TOKENS (OBLIGATORIO)
### ===========================================
### ‚ö†Ô∏è OBLIGATORIO: Ejecuta este paso PRIMERO para obtener los tokens
POST http://localhost:4000/api/login
Content-Type: application/json

{
  "email": "admin.test@example.com",
  "password": "password123"
}

### ===========================================
### 3. CREAR UNA RAZA (CON AUTENTICACI√ìN)
### ===========================================
POST http://localhost:4000/api/breeds
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwiaWF0IjoxNzYxMTUxMzA3LCJleHAiOjE3NjExNTE5MDd9.yJkGZVKaT5nuy6171ty8v9hRcowSJ9L03nwh4SeL_f8

{
  "name": "Husky Siberiano",
  "description": "Perro de trabajo resistente al fr√≠o",
  "origin_country": "Rusia",
  "size": "LARGE",
  "temperament": "Leal, Inteligente, Independiente",
  "life_expectancy": 12,
  "is_active": "ACTIVE"
}

### ===========================================
### 4. CREAR OTRA RAZA (CON AUTENTICACI√ìN)
### ===========================================
POST http://localhost:4000/api/breeds
Content-Type: application/json
Authorization: Bearer {{token}}
x-reset-token: {{refreshToken}}

{
  "name": "Border Collie",
  "description": "Perro de trabajo muy inteligente",
  "origin_country": "Escocia",
  "size": "MEDIUM",
  "temperament": "Inteligente, Energ√©tico, Alert",
  "life_expectancy": 13,
  "is_active": "ACTIVE"
}

### ===========================================
### 5. LISTAR TODAS LAS RAZAS (CON AUTENTICACI√ìN)
### ===========================================
GET http://localhost:4000/api/breeds
Authorization: Bearer {{token}}
x-reset-token: {{refreshToken}}

### ===========================================
### 6. OBTENER UNA RAZA POR ID (CON AUTENTICACI√ìN)
### ===========================================
GET http://localhost:4000/api/breeds/1
Authorization: Bearer {{token}}
x-reset-token: {{refreshToken}}

### ===========================================
### 7. ACTUALIZAR UNA RAZA (CON AUTENTICACI√ìN)
### ===========================================
PUT http://localhost:4000/api/breeds/1
Content-Type: application/json
Authorization: Bearer {{token}}
x-reset-token: {{refreshToken}}

{
  "description": "Descripci√≥n actualizada del Labrador",
  "life_expectancy": 13
}

### ===========================================
### 8. CREAR UN PERRO (CON AUTENTICACI√ìN)
### ===========================================
POST http://localhost:4000/api/dogs
Content-Type: application/json
Authorization: Bearer {{token}}
x-reset-token: {{refreshToken}}

{
  "name": "Luna",
  "birthday": "2021-03-10",
  "gender": "FEMALE",
  "color": "White & Gray",
  "weight": 25.5,
  "value_dog": 2000.00,
  "microchip_id": "MC9876543210",
  "health_status": "HEALTHY",
  "is_vaccinated": true,
  "is_sterilized": false,
  "owner_name": "Mar√≠a Garc√≠a",
  "owner_phone": "+57 310 555 1234",
  "registration_date": "2024-10-22",
  "is_active": "ACTIVE",
  "breed_id": 1
}

### ===========================================
### 9. CREAR OTRO PERRO (CON AUTENTICACI√ìN)
### ===========================================
POST http://localhost:4000/api/dogs
Content-Type: application/json
Authorization: Bearer {{token}}
x-reset-token: {{refreshToken}}

{
  "name": "Max",
  "birthday": "2020-05-15",
  "gender": "MALE",
  "color": "Golden",
  "weight": 30.5,
  "value_dog": 1500.00,
  "microchip_id": "MC1234567890",
  "health_status": "HEALTHY",
  "is_vaccinated": true,
  "is_sterilized": false,
  "owner_name": "Juan P√©rez",
  "owner_phone": "+57 300 123 4567",
  "registration_date": "2024-10-22",
  "is_active": "ACTIVE",
  "breed_id": 1
}

### ===========================================
### 10. LISTAR TODOS LOS PERROS (CON AUTENTICACI√ìN)
### ===========================================
GET http://localhost:4000/api/dogs
Authorization: Bearer {{token}}
x-reset-token: {{refreshToken}}

### ===========================================
### 11. OBTENER UN PERRO POR ID (CON AUTENTICACI√ìN)
### ===========================================
GET http://localhost:4000/api/dogs/1
Authorization: Bearer {{token}}
x-reset-token: {{refreshToken}}

### ===========================================
### 12. ACTUALIZAR UN PERRO (CON AUTENTICACI√ìN)
### ===========================================
PUT http://localhost:4000/api/dogs/1
Content-Type: application/json
Authorization: Bearer {{token}}
x-reset-token: {{refreshToken}}

{
  "health_status": "IN_TREATMENT",
  "is_vaccinated": true,
  "weight": 32.0,
  "owner_phone": "+57 310 555 9999"
}

### ===========================================
### 13. ELIMINAR UN PERRO (CON AUTENTICACI√ìN)
### ===========================================
DELETE http://localhost:4000/api/dogs/1
Authorization: Bearer {{token}}
x-reset-token: {{refreshToken}}

### ===========================================
### 14. ELIMINAR UNA RAZA (CON AUTENTICACI√ìN)
### ===========================================
DELETE http://localhost:4000/api/breeds/1
Authorization: Bearer {{token}}
x-reset-token: {{refreshToken}}

### ===========================================
### 15. REFRESCAR TOKEN (OPCIONAL)
### ===========================================
POST http://localhost:4000/api/refresh-token
Content-Type: application/json
Authorization: Bearer {{token}}
x-reset-token: {{refreshToken}}

### ===========================================
### üîê PRUEBAS DE PERMISOS POR ROLES
### ===========================================
### Usa estos ejemplos para probar diferentes niveles de acceso

### ADMIN - Acceso completo a todo
POST http://localhost:4000/api/login
Content-Type: application/json

{
  "email": "admin@parcialoh.com",
  "password": "admin123"
}

### USER - Solo CRUD de breeds/dogs (no DELETE)
POST http://localhost:4000/api/register
Content-Type: application/json

{
  "name": "Usuario Regular",
  "email": "regular.user@example.com",
  "password": "password123",
  "role": "USER"
}

### MODERATOR - Gesti√≥n de breeds/dogs + visualizaci√≥n de users/roles
POST http://localhost:4000/api/register
Content-Type: application/json

{
  "name": "Moderador",
  "email": "moderator@example.com",
  "password": "password123",
  "role": "MODERATOR"
}

### VIEWER - Solo lectura de breeds/dogs
POST http://localhost:4000/api/register
Content-Type: application/json

{
  "name": "Visualizador",
  "email": "viewer@example.com",
  "password": "password123",
  "role": "VIEWER"
}

### ===========================================
### MATRIZ DE PERMISOS POR ROL:
### ===========================================
### 
### üìã BREEDS (Razas):
### ‚Ä¢ ADMIN: ‚úÖ GET, POST, PUT, DELETE
### ‚Ä¢ MODERATOR: ‚úÖ GET, POST, PUT, DELETE
### ‚Ä¢ USER: ‚úÖ GET, POST, PUT ‚ùå DELETE
### ‚Ä¢ VIEWER: ‚úÖ GET ‚ùå POST, PUT, DELETE
###
### üêï DOGS (Perros):
### ‚Ä¢ ADMIN: ‚úÖ GET, POST, PUT, DELETE
### ‚Ä¢ MODERATOR: ‚úÖ GET, POST, PUT, DELETE  
### ‚Ä¢ USER: ‚úÖ GET, POST, PUT ‚ùå DELETE
### ‚Ä¢ VIEWER: ‚úÖ GET ‚ùå POST, PUT, DELETE
###
### üë• USERS (Usuarios):
### ‚Ä¢ ADMIN: ‚úÖ GET, POST, PUT, DELETE
### ‚Ä¢ MODERATOR: ‚úÖ GET ‚ùå POST, PUT, DELETE
### ‚Ä¢ USER: ‚ùå Sin acceso
### ‚Ä¢ VIEWER: ‚ùå Sin acceso
###
### üîê ROLES:
### ‚Ä¢ ADMIN: ‚úÖ GET, POST, PUT, DELETE
### ‚Ä¢ MODERATOR: ‚úÖ GET ‚ùå POST, PUT, DELETE
### ‚Ä¢ USER: ‚ùå Sin acceso  
### ‚Ä¢ VIEWER: ‚ùå Sin acceso
###
### ===========================================
### INSTRUCCIONES DE USO:
### ===========================================
### 1. Configura AUTH_ENABLED=true en tu archivo .env
### 2. Ejecuta el servidor: npm run dev
### 3. Los recursos y permisos se crean autom√°ticamente al iniciar
### 4. Registra usuarios con diferentes roles usando los ejemplos
### 5. Haz login con cada usuario para obtener su token
### 6. Prueba diferentes endpoints para verificar permisos
### 7. Los usuarios sin permisos reciben error 403
### 8. Solo /api/register y /api/login NO requieren autenticaci√≥n
